<?xml version="1.0" encoding="UTF-8"?>
<section id="mongo">
	<title>mongo 命令行</title>
	<screen>
	<![CDATA[
# mongo
MongoDB shell version: 2.2.3
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
>
	]]>
	</screen>
	<section>
		<title>help</title>
		<para>help</para>
		<screen>
db.help()                    help on DB methods
db.foo.help()                help on collection methods
		</screen>
	</section>
	<section>
		<title>show 查看命令</title>
		<section>
			<title>show dbs</title>
			<para>show dbs                     show database names</para>
			<screen>
			<![CDATA[
> show dbs
local	(empty)
logging	0.203125GB
test	0.203125GB
			]]>
			</screen>
		</section>
		<section>
			<title>show collections</title>
			<para>show collections             show collections in current database</para>
			<screen>
			<![CDATA[

> show collections
bios
system.indexes
			]]>
			</screen>
			<para>另一种用法是show tables</para>
			<screen>
			<![CDATA[
> show tables
bios
system.indexes
			]]>
			</screen>
		</section>
		<section>
			<title>show users</title>
			<para>show users                   show users in current database</para>
			<screen>
			<![CDATA[

			]]>
			</screen>
		</section>
		<section>
			<title>show profile</title>
			<para>show profile                 show most recent system.profile entries with time >= 1ms</para>
			<screen>
			<![CDATA[
> show profile
db.system.profile is empty
Use db.setProfilingLevel(2) will enable profiling
Use db.system.profile.find() to show raw profile entries
			]]>
			</screen>
		</section>
	</section>
	<section>
		<title>切换数据库</title>
		<screen>
		<![CDATA[
use <db name>                set curent database to <db name>

> use logging
switched to db logging
		]]>
		</screen>
	</section>
	<section>
		<title>索引管理</title>
		<para>增加索引：1(ascending),-1(descending)</para>
		<para>增加索引</para>
		<screen>
db.foo.ensureIndex({firstname: 1, lastname: 1}, {unique: true});
		</screen>
		<para>索引子对象</para>
		<screen>
		<![CDATA[
db.logging.users.ensureIndex({address.city:1})
		]]>
		</screen>
		<para>查看索引信息</para>
		<screen>
db.logging.getIndexes()
[
	{
		"v" : 1,
		"key" : {
			"_id" : 1
		},
		"ns" : "logging.logging",
		"name" : "_id_"
	}
]
		</screen>
		<para></para>
		<screen>
db.logging.users.getIndexKeys()

[ { "_id" : 1 }, { "name" : 1 } ]
		</screen>
		<para>根据索引名删除索引</para>
		<screen>
		<![CDATA[
> db.logging.users.dropIndex('name_1')
{ "nIndexesWas" : 2, "ok" : 1 }

> db.logging.users.getIndexKeys()
[ { "_id" : 1 } ]
		]]>
		</screen>
	</section>
	<section>
		<title>记录管理</title>
		<section>
			<title>save</title>
			<para>存储嵌套的对象</para>
			<screen>
			<![CDATA[
db.foo.save({'name':'neo','address':{'city':'shenzhen','post':518000},'phone':[13113668890,13322993040]})
			]]>
			</screen>
			<para>存储数组对象</para>
			<screen>
			<![CDATA[
db.foo.save({'Uid':'netkiller@msn.com','phone':['13322993040','13113668890']})
			]]>
			</screen>
		</section>
		<section>
			<title>insert</title>
			<screen>
			<![CDATA[
db.bios.insert(
   {
     _id: 1,
     name: { first: 'John', last: 'Backus' },
     birth: new Date('Dec 03, 1924'),
     death: new Date('Mar 17, 2007'),
     contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
     awards: [
               {
                 award: 'W.W. McDowell Award',
                 year: 1967,
                 by: 'IEEE Computer Society'
               },
               {
                 award: 'National Medal of Science',
                 year: 1975,
                 by: 'National Science Foundation'
               },
               {
                 award: 'Turing Award',
                 year: 1977,
                 by: 'ACM'
               },
               {
                 award: 'Draper Prize',
                 year: 1993,
                 by: 'National Academy of Engineering'
               }
             ]
   }
)
			]]>
			</screen>
		</section>
		<section>
			<title>update</title>
			<para>根据query条件修改，如果不存在则插入，允许修改多条记录</para>
			<screen>
db.foo.update({'yy':5},{'$set':{'xx':2}},upsert=true,multi=true)
			</screen>
		</section>
		<section>
			<title>remove</title>
			<para>删除uid=10的记录</para>
			<screen>
			<![CDATA[
db.foo.remove({'uid':10})
			]]>
			</screen>
			<para>删除所有的记录</para>
			<screen>
db.foo.remove()
			</screen>
		</section>
		<section>
			<title>find</title>
			<para>查找所有 所有记录</para>
			<screen>
db.foo.find()                list objects in collection foo
db.foo.find( { a : 1 } )     list objects in foo where a == 1
			</screen>
			<para>查找一条记录</para>
			<screen>
db.foo.findOne()
			</screen>
			<para>根据条件检索10条记录</para>
			<screen>
db.foo.find({'name':'neo'}).limit(10)
			</screen>
			<para>sort排序</para>
			<screen>
db.foo.find({'name':'neo'}).sort({'Dt',-1})
db.foo.find().sort({'Ct':-1}).limit(1)
			</screen>
			<para>count记录统计操作</para>
			<screen>
db.foo.count()
			</screen>
			<para>distinct操作,去重复查询指定列，</para>
			<screen>
db.foo.distinct('name')
			</screen>
			<para>”&gt;=”操作</para>
			<screen>
			<![CDATA[
db.foo.find({"timestamp": {"$gte" : 2}})
			]]>
			</screen>
			<para>子对象的查找</para>
			<screen>
db.foo.find({'address.city':'shenzhen'})
			</screen>
		</section>
		<section>
			<title>count()</title>
			<screen>
			<![CDATA[
> db.access.count()
51528
> db.access.count()
104401
			]]>
			</screen>
		</section>
		<section>
			<title>group()</title>
			<para>group()类似SQL中的Group by</para>
			<screen>
			<![CDATA[
> db.test.group({key: {remote_addr: true}, initial: {count: 0}, reduce: function(obj, prev) {prev.count++}});
[
	{
		"remote_addr" : "192.168.2.76",
		"count" : 3
	},
	{
		"remote_addr" : "192.168.2.70",
		"count" : 1
	}
]
			]]>
			</screen>
		</section>
	</section>
	<section>
		<title>管道操作</title>
		<screen>
		<![CDATA[
cat data.bson | mongo test
		]]>
		</screen>
	</section>
</section>
<section id="mapreduce">
	<title>Map-Reduce</title>
	<section>
		<title>使用 Map-Reduce 统计Web 服务器 access.log 日志文件</title>
		<para>首先将web服务器access.log导入到mongodb,参考  http://netkiller.github.io/article/log.html 格式如下：</para>
		<screen>
{
	"_id" : ObjectId("51553efcd8616be7e5395c0d"),
	"remote_addr" : "192.168.2.76",
	"remote_user" : "-",
	"time_local" : "29/Mar/2013:09:20:31 +0800",
	"request" : "GET /tw/ad.jpg HTTP/1.1",
	"status" : "200",
	"body_bytes_sent" : "5557",
	"http_referer" : "http://www.example.com/tw/",
	"http_user_agent" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17",
	"http_x_forwarded_for" : "-"
}
		</screen>
		<para>创建map方法 </para>
		<screen>
var mapFunction1 = function() {
    emit(this.remote_addr, {count:1});
};
		</screen>
		<para>创建reduce方法</para>
		<screen>
		<![CDATA[
var reduceFunction1 = function(key, values) {
	var total = 0;
	values.forEach(function (value) {total += value.count;});
    return {ipaddr: key, count:total};
};
		]]>
		</screen>
		<para>分析数据</para>
		<screen>
db.access.mapReduce(mapFunction1, reduceFunction1, {out : "resultCollection"});
		</screen>
		<para>输出结果</para>
		<screen>
db.resultCollection.find();
		</screen>
		<para>Demo 数据库</para>
		<screen>
		<![CDATA[
> db.resultCollection.find();
{ "_id" : "192.168.2.109", "value" : { "ipaddr" : "192.168.2.109", "count" : 554 } }
{ "_id" : "192.168.2.38", "value" : { "ipaddr" : "192.168.2.38", "count" : 26 } }
{ "_id" : "192.168.2.39", "value" : { "ipaddr" : "192.168.2.39", "count" : 72 } }
{ "_id" : "192.168.2.40", "value" : { "ipaddr" : "192.168.2.40", "count" : 3564 } }
{ "_id" : "192.168.2.49", "value" : { "ipaddr" : "192.168.2.49", "count" : 955 } }
{ "_id" : "192.168.2.5", "value" : { "ipaddr" : "192.168.2.5", "count" : 2 } }
{ "_id" : "192.168.2.76", "value" : { "ipaddr" : "192.168.2.76", "count" : 60537 } }
{ "_id" : "192.168.3.12", "value" : { "ipaddr" : "192.168.3.12", "count" : 9577 } }
{ "_id" : "192.168.3.14", "value" : { "ipaddr" : "192.168.3.14", "count" : 343 } }
{ "_id" : "192.168.3.18", "value" : { "ipaddr" : "192.168.3.18", "count" : 1006 } }
{ "_id" : "192.168.3.26", "value" : { "ipaddr" : "192.168.3.26", "count" : 2714 } }
{ "_id" : "192.168.6.19", "value" : { "ipaddr" : "192.168.6.19", "count" : 668 } }
{ "_id" : "192.168.6.2", "value" : { "ipaddr" : "192.168.6.2", "count" : 123760 } }
{ "_id" : "192.168.6.30", "value" : { "ipaddr" : "192.168.6.30", "count" : 1196 } }
{ "_id" : "192.168.6.35", "value" : { "ipaddr" : "192.168.6.35", "count" : 1050 } }
>
		]]>
		</screen>
	</section>
</section>